var documenterSearchIndex = {"docs":
[{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicMetabolism.jl/blob/main/docs/literate/literate_example.jl\"","category":"page"},{"location":"generated/literate_example/#AlgebraicMetabolism-Package-Demo","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"","category":"section"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"First we want to load our package with using, we will also want some Catlab utilities.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"using AlgebraicMetabolism\nusing Catlab\nusing Catlab.ACSets\nusing Catlab.CategoricalAlgebra\nusing Catlab.CategoricalAlgebra.CSets\nusing Catlab.Graphics\nusing Catlab.Graphics.Graphviz\nusing Test","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"The first step is to understand the data model of what metabolic network is","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"There are sets:","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"V the vertices, which represent variables in the system\nE₁ the edges that represent coefficients\nE₂ the edges that represent exponents\nNames for using human readable variable names\nNumbers for storing coefficients and exponents","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"Then there are relationships:","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"src₁,tgt₁ for encoding a graph of coefficients\nsrc₂,tgt₂ for encoding a graph of exponents\nμ,f tell you the numeric value associated with that edge\nγ an intrinsic parameter for the strength of effects per vertex\nvname gives you the vertex names","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"We did not name the edges, because they don't really have conceptual identities other than \"the interaction between x,y\" where x is the src and y is the target variables.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"to_graphviz(SchReactionMetabolicNet)","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"The schema definition is given in the following domain specific language (DSL) invented by Catlab.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"@present SchMetabolicNet(FreeSchema) begin\n  (V, E₁, E₂)::Ob\n  src₁::Hom(E₁, V)\n  tgt₁::Hom(E₁, V)\n\n  src₂::Hom(E₂, V)\n  tgt₂::Hom(E₂, V)\nend\n\n@present SchReactionMetabolicNet <: SchMetabolicNet begin\n  Name::AttrType\n\n  vname::Attr(V, Name)\n\n  Number::AttrType\n  γ::Attr(V, Number)\n  μ::Attr(E₁, Number)\n  f::Attr(E₂, Number)\n\nend","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"Once we define the schema, Catlab will generate a domain specific language for specifying models. This language isn't the easiest to write, but it is completely generated from the specification of the schema, and works for any type of model that you can build.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"#Let's make our first model\n\nM = @acset ReactionMetabolicNet{Rational} begin\n  V = 3\n  E₁ = 2\n  E₂ = 3\n  vname = [:x₁, :x₂, :x₃]\n  γ = [1//2, 1//3, 2]\n\n  src₁ = [1,2]\n  tgt₁ = [2,3]\n  μ = [7,11]\n\n  src₂ = [1,2,3]\n  tgt₂ = [2,3,3]\n  f = [1,2,3]\nend","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"We should visually inspect our model with graphviz rendering","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"to_graphviz(M)","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"We can compute the dynamics equation from the model with dynamics_expr","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"@show dynamics_expr(M)","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"Because these models are defined as a presheaf category, they come with a lattice of subobjects. This works like subsets of a set, but will respect the connectivity structure of the model.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"X1 = Subobject(M, V=[1])\nX2 = Subobject(M, V=[2])\nX3 = Subobject(M, V=[3])\n\ndraw_subobject(join(join(X1, X2), X3))","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"From the isolate vertices shown above we can compute the \"model complement\" with the negation operator. For example, the complement of X3 is X1 and X2 and all their interactions.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"negate(X3) |> draw_subobject","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"And the complement of X1 is X2 and X3 with all their interactions.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"negate(X1) |> draw_subobject","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"The meet and join operators play the role of union and intersection","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"meet(negate(X3), negate(X1)) |> draw_subobject","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"But I always forget which is which!","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"join(negate(X3), negate(X1)) |> draw_subobject","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"Most of your propositional logic rules apply in this lattice.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"is_subobject(X3, negate(join(X1, X2)))","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"The biggest difference is that double negation is not the identity. While join(X1,X2) has 2 vertices and no edges, ¬¬(X1 ∨ X2) has 2 vertices and 2 edges! Double negation can be used to define the \"induced subgraph\" operator for any class of models.","category":"page"},{"location":"generated/literate_example/","page":"AlgebraicMetabolism Package Demo","title":"AlgebraicMetabolism Package Demo","text":"negate(negate(join(X1, X2))) |> draw_subobject","category":"page"},{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [AlgebraicMetabolism]","category":"page"},{"location":"api/#AlgebraicMetabolism.AlgebraicMetabolism","page":"Library Reference","title":"AlgebraicMetabolism.AlgebraicMetabolism","text":"Some description of ths package\n\n\n\n\n\n","category":"module"},{"location":"api/#AlgebraicMetabolism.SchMetabolicNet","page":"Library Reference","title":"AlgebraicMetabolism.SchMetabolicNet","text":"ACSet definition for a Biochemical Systems Theory model\n\nSee Catlab.jl documentation for description of the @present syntax.\n\n\n\n\n\n","category":"constant"},{"location":"api/#AlgebraicMetabolism.ReactionMetabolicNet","page":"Library Reference","title":"AlgebraicMetabolism.ReactionMetabolicNet","text":"ReactionMetabolicNet{R}\n\nThe main entry type for building a metabolic model with fixed parameters baked in.\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicMetabolism.dynamics_expr-Tuple{ReactionMetabolicNet}","page":"Library Reference","title":"AlgebraicMetabolism.dynamics_expr","text":"dynamics_expr(m::ReactionMetabolicNet)\n\nBuild the expression for a reaction net from the combinatorial data. The expression we want to build is equivalent to:\n\ndxi = sum(μ[i,j] ⋅ γ[j] ⋅ prod(X[k]^f[j,k] for k in 1:N) for j in 1:N)\n\nfracddt X_i = sum_j(mu_ij cdot gamma_j cdot prod_k X_k^f_jk\n\nThis formula evaluates the dynamics of the system.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicMetabolism.edges₁-Tuple{ReactionMetabolicNet, Int64, Int64}","page":"Library Reference","title":"AlgebraicMetabolism.edges₁","text":"edges₁(m::ReactionMetabolicNet, i::Int, j::Int)\n\naccess a vector of the E₁ edges between vertex i and vertex j.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicMetabolism.edges₂-Tuple{ReactionMetabolicNet, Int64, Int64}","page":"Library Reference","title":"AlgebraicMetabolism.edges₂","text":"edges₂(m::ReactionMetabolicNet, i::Int, j::Int)\n\naccess a vector of the E₂ edges between vertex i and vertex j.\n\n\n\n\n\n","category":"method"},{"location":"#AlgebraicMetabolism.jl","page":"AlgebraicMetabolism.jl","title":"AlgebraicMetabolism.jl","text":"","category":"section"},{"location":"","page":"AlgebraicMetabolism.jl","title":"AlgebraicMetabolism.jl","text":"CurrentModule = AlgebraicMetabolism","category":"page"},{"location":"","page":"AlgebraicMetabolism.jl","title":"AlgebraicMetabolism.jl","text":"AlgebraicMetabolism.jl is a Julia library for building and analyzing Metabolic Networks. It is based on Biochemical Systems Theory. Inspired most heavily by the work of Eberhard Voit.","category":"page"},{"location":"","page":"AlgebraicMetabolism.jl","title":"AlgebraicMetabolism.jl","text":"You will find first a demo using the package, and then a library reference.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicMetabolism.jl/blob/main/docs/literate/pullbacks.jl\"","category":"page"},{"location":"generated/pullbacks/#Stratification","page":"Stratification","title":"Stratification","text":"","category":"section"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"First we want to load our package with using, we will also want some Catlab utilities.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"using AlgebraicMetabolism\nusing Catlab\nusing Catlab.ACSets\nusing Catlab.CategoricalAlgebra\nusing Catlab.CategoricalAlgebra.CSets\nusing Catlab.Graphics\nusing Catlab.Graphics.Graphviz\nusing Test\n\n@acset_type MetabolicNet(SchMetabolicNet, index=[]) <: AbstractMetabolicNet\n\n\nM = @acset MetabolicNet begin\n  V = 2\n  E₁ = 3\n  E₂ = 3\n\n  src₁ = [1,2,1]\n  tgt₁ = [1,2,2]\n\n  src₂ = [1,2,1]\n  tgt₂ = [1,2,2]\nend","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"Now we can compute the product model to get a model with 2×2=4 states.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"M² = product(M,M)\nP = ReactionMetabolicNet{Rational}()\ncopy_parts!(P, apex(M²))\nto_graphviz(P)","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"We need to propagate the attributes from the factor models to the product model. We start with the attributes for the original two models.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"vnames₁ = [:x1, :x2]\nγ₁ = [1//2, 1//3]\nμ₁ = [2,3,5]\nf₁ = [1,2,3]\n\nvnames₂ = [:a, :b]\nγ₂ = [7//2, 7//3]\nμ₂ = 11*[2,3,5]\nf₂ = [1,2,3]/2","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"The names get composed by tupling.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"π₁, π₂ = legs(M²)\nfor v in parts(P, :V)\n  P[v, :vname] = Symbol(\"($(vnames₁[π₁[:V](v)]),$(vnames₂[π₂[:V](v)]))\")\n  P[v, :γ] = γ₁[π₁[:V](v)]*γ₂[π₂[:V](v)]\nend","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"The coefficients multiply","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"for e in parts(P, :E₁)\n  P[e, :μ] = μ₁[π₁[:E₁](e)]*μ₂[π₂[:E₁](e)]\nend","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"The exponents add","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"for e in parts(P, :E₂)\n  P[e, :f] = f₁[π₁[:E₂](e)]+f₂[π₂[:E₂](e)]\nend","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"And the resulting model can be drawn. Notice the symmetry in both the structure, and the numbers.","category":"page"},{"location":"generated/pullbacks/","page":"Stratification","title":"Stratification","text":"to_graphviz(P)","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicMetabolism.jl/blob/main/docs/literate/composition.jl\"","category":"page"},{"location":"generated/composition/#Composition","page":"Composition","title":"Composition","text":"","category":"section"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"First we want to load our package with using, we will also want some Catlab utilities.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"using AlgebraicMetabolism\nusing Catlab\nusing Catlab.ACSets\nusing Catlab.CategoricalAlgebra\nusing Catlab.CategoricalAlgebra.CSets\nusing Catlab.Graphics\nusing Catlab.Graphics.Graphviz\nusing Catlab.Programs\nusing Catlab.Programs.RelationalPrograms\ndraw(uwd::RelationDiagram) = to_graphviz(uwd,box_labels=:name, junction_labels=:variable)\ndraw(m::MetabolicNet) = to_graphviz(default_attrs(m))","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"Our model is going to be the very basic equation with 2 states and 3 edges.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"M = @acset MetabolicNet begin\n  V = 2\n  E₁ = 3\n  E₂ = 3\n\n  src₁ = [1,2,1]\n  tgt₁ = [1,2,2]\n\n  src₂ = [1,2,1]\n  tgt₂ = [1,2,2]\nend\ndraw(M)","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"We formulate an open version of this model by declaring an interface to it. The interface is the first and second variable as the two exterior ports of the model.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"Mₒ = OpenMetabolicNet(M,FinFunction([1],2),FinFunction([2],2));\nnothing #hide","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"The composition pattern below says to take two systems and compose them so that the second interface of the first system is the first interface of the second system. Composition patterns have a tabular representation by default, because they are ACSets.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"d = @relation (x,z) begin\n  f(x,y)\n  g(y,z)\nend","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"We can draw the composition pattern that we are going to use.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"draw(d)","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"Then when we apply this composition pattern to two copies of our model, we get the following composite model.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"M₂ = oapply(d,[Mₒ,Mₒ])\ndraw(apex(M₂))","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"By reversing the interface ordering on the system, we can change the composite.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"Mₒꜛ = OpenMetabolicNet(M, FinFunction([2],2), FinFunction([1],2))\nM₂ꜛ = oapply(d,[Mₒ,Mₒꜛ])\ndraw(apex(M₂))","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"We can also take the output of a composition and plug it in as the input to another level of composition. This let us build models hierarchically.","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"M₄ = oapply(d,[M₂ꜛ, Mₒ])\ndraw(apex(M₄))","category":"page"},{"location":"generated/composition/","page":"Composition","title":"Composition","text":"Notice that this way of composition leads to duplicated arrows at the places where you glue the models. The dynamics function will do the math to multiply coefficients and add the exponents or you could fix with this with ACSet rewriting using AlgebraicRewriting.jl By specifying a pattern of duplicate edges and a rewrite rule that that does the appropriate math on the model parameters associated with those interactions.","category":"page"}]
}
